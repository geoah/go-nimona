// Code generated by nimona.io/go/cmd/objectify. DO NOT EDIT.

// +build !generate

package crypto

import (
	"nimona.io/go/encoding"
)

// ToMap returns a map compatible with f12n
func (s Mandate) ToMap() map[string]interface{} {

	m := map[string]interface{}{
		"@ctx:s":         "/mandate",
		"authority:O":    s.Authority.ToMap(),
		"subject:O":      s.Subject.ToMap(),
		"description:s":  s.Description,
		"resources:A<s>": s.Resources,
		"actions:A<s>":   s.Actions,
		"effect:s":       s.Effect,
		"@sig:O":         s.Signature.ToMap(),
	}
	return m
}

// ToObject returns a f12n object
func (s Mandate) ToObject() *encoding.Object {
	return encoding.NewObjectFromMap(s.ToMap())
}

// FromMap populates the struct from a f12n compatible map
func (s *Mandate) FromMap(m map[string]interface{}) error {
	if v, ok := m["authority:O"].(map[string]interface{}); ok {
		s.Authority = &Key{}
		if err := s.Authority.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["authority:O"].(*Key); ok {
		s.Authority = v
	}
	if v, ok := m["subject:O"].(map[string]interface{}); ok {
		s.Subject = &Key{}
		if err := s.Subject.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["subject:O"].(*Key); ok {
		s.Subject = v
	}
	if v, ok := m["description:s"].(string); ok {
		s.Description = v
	}
	if v, ok := m["resources:A<s>"].([]string); ok {
		s.Resources = v
	}
	if v, ok := m["actions:A<s>"].([]string); ok {
		s.Actions = v
	}
	if v, ok := m["effect:s"].(string); ok {
		s.Effect = v
	}
	if v, ok := m["@sig:O"].(map[string]interface{}); ok {
		s.Signature = &Signature{}
		if err := s.Signature.FromMap(v); err != nil {
			return err
		}
	} else if v, ok := m["@sig:O"].(*Signature); ok {
		s.Signature = v
	}
	return nil
}

// FromObject populates the struct from a f12n object
func (s *Mandate) FromObject(o *encoding.Object) error {
	return s.FromMap(o.Map())
}

// GetType returns the object's type
func (s Mandate) GetType() string {
	return "/mandate"
}
