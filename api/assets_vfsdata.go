// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 28, 23, 34, 47, 732301767, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 11, 28, 23, 34, 47, 732740489, time.UTC),
			uncompressedSize: 6647,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x51\x73\xdb\xb8\x11\x7e\xf7\xaf\xd8\xd0\xed\x51\x8a\x45\x52\x8a\xc7\xf1\x99\xa6\x94\x5e\x2e\xf6\x5c\xae\xb9\x5c\xa7\xce\xdc\x3d\x38\xbe\x19\x88\x5c\x49\x88\x41\x80\x01\x40\xc9\x4a\xe2\xff\xde\x01\x48\x89\x20\x25\xfb\xdc\x4e\x1f\x3a\x95\x32\x19\x06\xd8\x5d\xec\x7e\xbb\xfb\x61\xa9\x24\xcf\x82\x00\x5e\x13\x85\x19\x08\x0e\x0b\xad\x0b\x15\x47\xd1\x94\x89\x79\xa8\x91\xe4\x5a\x22\x2e\x44\xa9\x30\x4c\x45\x1e\x11\x1e\x50\xae\xa5\xc8\xca\x54\x53\xc1\x03\x2d\x82\x15\x4e\x95\x48\x6f\x51\x2b\x08\x82\xc9\x41\xb2\xd0\x39\x9b\x1c\x1c\x24\x0b\x24\xd9\xe4\x00\x20\x51\x7a\xcd\xd0\x3c\x01\x3c\x1f\xc0\xf3\x78\x8a\x33\x21\xd1\x3c\x91\x99\x46\x09\x5f\xed\x96\xf9\x04\xb9\xf8\x12\x4c\xc5\x5d\xa0\xe8\x17\xca\xe7\x31\x4c\x85\xcc\x50\x9a\xa5\xf3\x46\x68\x85\xd3\x5b\xaa\xff\x54\xee\xf1\xfd\xfb\x83\xfa\xc1\xb8\xeb\xb8\x30\x13\x5c\x07\x33\x92\x53\xb6\x8e\xe1\x27\x64\x4b\xd4\x34\x25\x03\xf8\x41\x52\xc2\x06\xa0\x08\x57\x81\x42\x49\x67\xe7\x6d\x15\x45\xbf\x60\x0c\xa3\xe1\xf0\xaf\x8e\x07\x24\xbd\x9d\x4b\x51\xf2\x2c\x86\xc3\xe3\xe3\xe3\x9d\xb3\x0f\x0b\x32\xc7\x60\x25\x49\x51\xb4\x70\x58\xd1\x4c\x2f\x62\x78\x79\x32\x2c\xee\x1e\x30\x77\x79\x79\xd9\xec\x14\x24\xcb\x6c\x9c\x23\xcc\x9b\xd5\x9c\xc8\x39\xe5\x76\x11\x48\xa9\x85\x0b\x8d\x85\x43\x8b\x22\x86\x93\xe2\x0e\x94\x60\x34\x83\xc3\x97\x67\xe9\xe9\xe9\x71\x07\xc1\x05\xc9\xc4\x2a\x86\x21\xbc\x28\xee\x60\x34\x2c\xee\x40\xce\xa7\xa4\x37\x1c\xd8\x6f\xf8\x7d\x7f\x17\xd1\x91\x13\x4a\xe5\x44\x75\xd4\x70\x17\x00\xa5\x89\x2e\x55\x17\xff\x0a\xcc\x61\x78\x26\x77\xe3\x09\xa6\x42\x6b\x91\xc7\x30\x72\x36\xb7\x06\x43\x51\x20\x77\xcc\xa5\x82\x09\x19\xc3\x5c\x22\xf2\x5d\xe1\x94\x09\x53\xf6\x3b\xe2\x12\x33\x47\xb8\x7e\x2a\xdd\x32\x61\x54\xe9\xc0\x16\x76\x0c\x5c\x70\xdc\x45\x7d\xb8\x27\x3d\xc3\xbd\x45\x33\x0c\xcf\x4e\xf6\xc5\x52\x32\x60\xd4\x39\xb3\x31\x13\x1a\x79\x18\x86\xa7\x27\x2d\x80\xb6\x55\x5e\x03\xd4\x64\xf6\xe2\xe2\x62\xbf\xf9\x78\x46\xa5\xd2\x41\xba\xa0\xcc\xc5\xc1\x2d\x90\xa7\x98\x81\x8c\x2e\x63\xae\x17\x95\xa1\xde\x8b\xbe\x63\x4b\xe3\x9d\x0e\xc4\x12\xe5\x8c\x99\x42\x42\xc6\x68\xa1\xa8\x6a\xdc\x5e\x2d\xa8\xc6\x40\x15\x24\xb5\x60\x9a\x76\x68\x36\x1b\xc5\x05\xcd\xb2\x3d\x49\xac\xce\x57\x05\x71\xd3\x9e\x51\x55\x30\xb2\x8e\x81\x72\x46\x39\x06\x53\x26\xd2\xdb\xf3\x6e\x7f\x9d\xb5\xda\xcb\x66\x64\x85\x74\xbe\xd0\x86\x30\x58\x76\xde\x2d\x8b\xc3\xb3\xb3\xb3\x07\x32\x78\xda\x4a\x84\x0d\x59\x4b\xc2\xd5\x4c\xc8\x3c\x86\xd2\xf4\x77\x4a\x94\x53\x26\x0c\xb5\x46\x69\xa3\xae\x3a\xb7\xd8\xa5\xa6\x50\x21\xd7\x6e\x56\xb6\x04\x10\x6c\x3c\xba\x3c\x35\xdf\xdd\xbe\xca\x51\x29\xc3\x2d\xe6\xfc\x07\xba\x71\x14\xee\xad\x3a\xe3\x3b\x91\x48\x76\xe9\xa8\x4d\x6e\x9d\x6a\xdc\x4f\x87\x7b\xca\xb3\x55\x50\x6f\xce\xcc\x77\xa7\x82\x25\xc9\x68\xa9\x62\x38\x2e\xba\x7c\x5e\xb3\x11\xe5\x0a\x35\x0c\xad\xa9\x51\x43\x49\x50\xff\x09\x47\x7d\xa7\x21\x29\x0f\x16\x75\x5a\x47\xc3\x56\xca\x9f\xc2\x28\x94\x17\xa5\xfe\xff\x01\xe3\x09\x11\x4f\x4b\xad\xc5\xbf\xd1\x4d\x8f\xfb\x59\x85\xd9\xe6\xc8\x47\x48\xde\x41\xf2\xa5\x21\xb9\xd6\x8d\x56\x57\xbd\x25\x8c\x3d\x8c\x0b\xc3\xf0\xc5\xc9\x6e\x23\x12\x46\xe7\x3c\x86\x14\xb9\x46\xf9\xc0\x75\xfa\xfa\x07\xf3\x7d\x0a\x95\x3a\x1c\xd0\x41\xec\x5a\xaf\x0b\x1c\x7b\xaa\x9c\xe6\x54\x7b\x37\x7b\x1b\x37\x86\xc3\xef\x5f\x4e\x8f\x5f\x64\x4f\x39\xea\x24\x3b\xcd\x46\xb3\x07\x4e\x8b\x17\x86\x1a\x9d\x43\x84\xa1\x12\xbd\xb6\x6c\x74\xe2\x60\x56\x4a\x65\x40\x2b\x04\x75\xe3\xdf\x5a\x23\x0f\x0d\x3f\xb9\xe0\xc2\x92\x72\x07\xce\x0c\x53\x21\x89\x99\xfe\xba\x69\xad\xd3\xd3\x0e\x70\x7b\x50\x21\xf1\x51\x2e\x9b\x2f\x84\xd2\x9d\xd4\xee\x76\x89\xa2\x6c\xe9\x66\xb1\x19\x7d\xcc\x68\xf2\x62\x4f\x7b\xc7\xad\xd5\x86\x5c\x3f\x29\xc1\x83\x5b\x5c\xef\x5e\xff\x53\x29\x56\x7b\xa6\x05\xab\xb0\x24\xac\xc4\x5d\x15\x4e\x96\xeb\x07\x34\x94\x96\x94\xcf\x77\x55\x04\xa3\x4b\x6c\x74\xcc\xdf\x49\xb4\x9d\x95\x13\x95\x4a\x5a\xe8\x6a\x6c\x8e\x22\x83\x9e\xd6\x6b\x28\x24\xe5\xda\x98\x9b\x49\x91\xdb\x61\x3d\x8e\xa2\x4f\x6a\x46\xb3\x8c\x61\xc8\x51\x47\x25\x7f\x77\xf5\x73\x64\xd5\xe8\x0c\x7a\xcf\x18\x9d\x4a\x22\xd7\xfd\xfa\xa0\x25\x91\x50\x2f\xc1\x18\xbe\xde\x9f\x57\xce\xd6\x4b\xd6\x63\xb3\x5e\x4b\x4b\x2c\x18\x49\x4d\x06\x66\x25\xb7\x13\x3f\xf4\x72\xa2\xd3\xc5\x00\x8a\xb7\x3c\x43\xae\x07\x50\xfc\x1d\xd7\x03\x28\x7e\x33\xe3\x71\x71\xc1\x33\xf7\xee\x37\xa7\x19\x88\xc7\xe0\x27\xf6\x8a\x4e\x19\x51\x6a\xbc\x81\x7e\xe2\x9f\xb7\x44\x97\x84\xed\x15\xb5\xa0\x77\x85\x95\x96\x7b\x85\x2b\xbc\xbb\xd2\x46\xb6\x76\x19\xbe\x7d\x03\xdf\xd9\x36\x30\x99\x20\xfa\xdb\x15\xb0\xe2\x12\x8e\xac\xf3\x47\x36\xc4\xb0\xc6\xa2\x17\x5d\x7b\x31\xdc\x44\xf3\x01\xf8\x7e\x1f\x8e\xc0\x4f\x22\xe3\xc2\x24\x86\xae\xcd\xdf\x08\xdb\x67\xd3\x6e\x5c\x0f\x6f\x60\x3c\x06\xdf\xf3\xe1\x95\x0d\x25\x36\xd1\x1b\x7b\x66\xd7\x31\xeb\x18\x95\xa8\x4b\xc9\x6b\x1b\x17\x3c\xab\x02\x69\x06\xf0\x41\xd3\x69\x5a\xaf\xff\x61\x4a\xc5\x4d\x9c\x98\x7e\xea\xe6\xc6\x00\xf6\x8e\x72\x84\x31\x44\x7f\xf4\xe0\x79\xbf\xe7\x5d\x7f\x5c\xdd\x1c\x79\x31\xf4\x5f\xf5\xbc\xeb\x3f\xbc\x9b\xe7\xde\xb7\xeb\x8f\xab\xf0\x28\xb8\x79\xde\x7f\xd5\xbb\x1e\x5c\x7f\xbd\xe9\xbf\xfa\x4b\x94\xcf\x77\xfc\xfa\xf9\xea\xd7\xf7\x61\x85\x3e\x9d\xad\xcd\x71\x03\xe0\x25\x63\x03\x38\x76\x61\x68\x80\xfc\xce\x82\xf8\x1d\xc9\x8b\x73\xbf\xdf\x2c\x7f\xfc\xe8\x55\x1b\x9f\x4b\xa1\xcf\xfd\xfd\xba\x49\x25\xc2\x74\x4b\x75\x52\xad\xce\x1f\x52\xdb\xc4\x3b\x68\x15\xfc\x66\x5b\xf6\xdb\xed\x78\x6f\xfe\x99\x44\x9b\x4e\x4c\xa2\xea\x95\xf6\x20\x99\x8a\x6c\x6d\x9b\x34\xa3\x4b\xa0\xd9\xd8\x73\xdf\xe3\xbc\xaa\x67\x93\xc5\xf1\xe4\x3d\xcd\x05\x27\xb0\x7d\x43\x06\xbc\x23\x79\xc1\x30\x89\x16\xc7\xb5\xd4\xc6\x42\xf5\x22\xe4\x4d\x7e\x14\x9c\x63\x6a\x5a\x3c\x0c\xc3\x24\xca\xe8\x72\x52\x75\x68\x62\x47\x39\x23\xea\xce\x76\x1e\x10\x9b\xdd\xb1\x77\xe8\x41\x8e\x7a\x21\x8c\x37\x42\xe9\xda\x0b\x80\x64\x3b\xd0\x39\xba\x1e\xd8\x80\x17\x82\x65\x28\xc7\xde\xef\x92\x6a\x84\xb5\x28\x25\xd4\x02\xb0\x40\x89\x61\x18\x7a\x20\xf1\x73\x49\x25\x66\x93\x24\xda\x58\xda\x9a\xae\x66\x23\x63\x57\x62\x4a\x0b\x8a\x5c\x77\x2c\xff\x73\xb3\xee\x2b\xd3\x4b\x8d\x39\x88\xb6\x56\xea\x79\xa3\x75\x7b\x4e\xae\x90\x67\xf0\x4b\xe5\x4c\x12\x55\x22\x35\x64\x91\x09\x7c\x83\x4a\xc9\xdc\xb8\x94\x37\x49\xa2\x92\xd9\xdc\x6c\xb1\x6b\x51\x69\x29\x2d\xc5\xac\x54\x1c\x45\x3e\x1c\x01\x13\xa9\xbd\xcb\x42\x73\xfb\x70\x92\xa3\x69\xae\xed\x62\x21\xa4\x86\x57\xe0\xc7\x2d\x51\xbb\x1a\x6f\xda\x3f\x22\x05\x8d\x96\xa3\x48\x69\x89\x24\x57\x11\xb7\x49\x0f\xa9\x88\x6a\xa7\xfc\x9a\x63\x57\x94\x67\x62\x15\x0a\xce\x04\xc9\x60\xec\x74\x66\xd3\x96\xa6\x29\x6d\xa2\xc7\x90\x89\xb4\xcc\x91\xeb\x70\x8e\xfa\x82\xa1\x79\x7c\xbd\x7e\x9b\xf5\x7c\x37\xff\x4d\xf7\x1b\xcd\x7a\xe7\x92\x22\xcb\x9e\x60\xa1\xad\xbc\x4d\xe1\x9f\xaa\x6f\x25\xf7\x9e\xae\xde\x51\xa5\x9f\x70\xba\x6a\x6b\x57\x1d\x72\x55\xfd\x1e\xf0\x88\x76\xd5\x28\x46\xb7\x56\xde\x4a\x7e\x2e\x51\xae\xaf\x90\x61\xaa\x85\xec\xf9\xa6\x49\xfd\x7e\x48\xb2\xec\x62\x89\x5c\x1b\xaf\x90\xa3\xec\xf9\x29\xa3\xe9\xad\x3f\x70\xf0\x47\x97\x17\x0d\x75\x63\xa8\x89\x9c\xa3\x0e\xed\xbd\xf2\x9e\xe4\x18\x6a\xf1\x4e\xac\x50\xfe\x48\x14\xf6\xfa\x30\x36\xdc\x6d\xee\x60\xdf\x55\x85\x0e\x88\x61\x35\x2d\x8c\x61\x6b\x2f\x23\x9a\x28\xd4\xe1\x2d\xae\x1b\xfe\xbc\xdf\xb0\x4e\x13\x54\x0a\x63\xe0\xb8\x82\xdf\x71\x7a\x65\x81\xe9\x95\x92\x6d\xf1\x4a\x43\xc1\xed\x0f\x1d\x6e\x11\xa1\x89\xd2\xf5\xc6\x45\x34\xa4\x9c\xa3\xfc\xe9\xc3\x2f\xef\x4c\xf5\xd7\x24\x83\x19\x68\x11\x83\xa9\x6d\xab\x1c\xa6\xa5\x94\xc8\xf5\x87\xca\xd7\x52\xb2\xf3\xfd\xc6\xb6\xa8\x18\x63\xc6\x91\xed\x25\x75\xbf\x8d\xc0\x54\x67\x28\x78\xd5\xcf\x6d\x47\x5d\x27\x31\x2c\xa4\x3d\xfc\x0d\xce\x48\xc9\x74\xaf\xdf\xbe\xb7\x4d\x16\x61\xdc\xaa\xec\x0a\xd5\xce\xf5\xbe\xc1\xdd\xd4\xce\xf5\xbe\x2c\xdc\x74\xec\x9a\x77\x18\x67\xd2\x31\x1f\xef\x6f\xa9\xbe\xf3\x62\xf0\x76\x5a\xd8\x1b\xb4\xc4\x0a\xc1\xbc\xb8\xa5\xea\x28\x47\x85\x60\x34\x5d\xb7\x54\x00\x0c\xb1\x7d\xc2\x54\x2b\x2f\x86\xcd\x63\x47\xa2\x62\x72\x23\x70\xed\x49\x24\x99\x77\xd3\x11\xc0\xd9\x0c\x53\x6d\xce\x20\x8c\x89\x95\xe7\xec\xde\xb7\x1c\x34\xa0\x79\xb1\xc5\xae\xb5\xae\x69\x8e\x4a\x93\xbc\xf0\x62\xe8\x99\xf2\x7a\x43\x34\xf6\xfa\xfd\x50\x8b\xb7\x57\xbf\x5e\xd9\xab\xbb\xd7\xdf\xa9\x4b\x53\x70\x0a\x79\xd6\xeb\xdc\xf0\x16\xc3\x7e\x7f\x67\x10\x98\x11\xd6\xfc\xd4\xd1\x54\x84\xa9\x5a\x94\x52\xc8\x76\x35\x98\x95\x7e\x6b\x3c\xe6\x4a\x30\x0c\xed\x46\xcf\xdf\x76\x00\x5c\x98\x85\xba\x5c\xad\xd2\xfe\x23\x36\x37\x98\x7b\x48\xae\xe6\xdd\xd1\x67\x53\x00\x36\xa6\x82\x48\x85\x46\xca\x36\x68\xff\x7c\xc7\x19\x26\xe6\x75\xb8\x2d\x9e\x78\xf6\xcc\x2e\x86\x62\xc5\x51\xb6\x99\xc0\x65\xc3\x76\xf7\x25\x8c\xd6\xf3\xaa\xb9\x36\x91\x2e\x31\xf3\x26\x3e\x1c\xb5\x92\xed\x9b\xc9\x60\x62\x87\xdb\x49\x7d\x0d\xc6\x9b\x89\x10\x8e\x2a\xef\x43\xdb\x1c\x76\x54\x34\xc2\x8f\x99\xb8\x94\x22\xdf\xe8\x27\x04\x16\x12\x67\x76\x64\xa8\xfd\x30\x4c\xe6\x81\x89\xdd\x8c\xe5\x63\xaf\x39\xc2\x46\x66\xce\xf0\x26\x7b\x16\x93\x88\x4c\x1e\x3a\x3c\x62\xd4\xaa\xec\x07\xa2\x29\x32\x40\xa6\xf0\x7f\x18\xba\x0f\xe2\x3f\x02\xae\x61\x24\x33\xea\x77\x00\xdc\xd9\xfc\x6f\x00\xd9\x9e\x5d\x0f\x5a\xb3\xeb\x41\x12\x55\x43\xab\x99\x62\xed\x7f\xd0\xfc\x2b\x00\x00\xff\xff\xec\x46\xf2\x62\xf7\x19\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
